package data

/*
MIT License

Copyright (c) 2022 github.com/kuritka

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

// https://github.com/kuritka/CommodityQuotations
// https://github.com/kuritka/MarketLoader
import "time"

type Category uint8

type Period uint8

var Categories = struct {
	Currencies        Category
	Energies          Category
	Financials        Category
	GrainsAndOilseeds Category
	Indices           Category
	Meats             Category
	Metals            Category
	Softs             Category
}{
	Currencies:        1,
	Energies:          2,
	Financials:        3,
	GrainsAndOilseeds: 4,
	Indices:           5,
	Meats:             6,
	Metals:            7,
	Softs:             8,
}

var Periods = struct {
	Unknown Period
	Hourly  Period
	Daily   Period
	Weekly  Period
	Monthly Period
}{
	Unknown: 0,
	Hourly:  1,
	Daily:   2,
	Weekly:  4,
	Monthly: 8,
}

type Quote struct {
	Open     float64
	Close    float64
	Low      float64
	High     float64
	Volume   int
	Interest int
	Code     string
	DateTime time.Time
}

func NewQuote() Quote {
	return Quote{}
}

type Inflation struct {
	Annual  float64
	Year    int
	Monthly []float64
}

type Cpi struct {
	Year    int
	Monthly []float64
}

func (a Cpi) Annual() float64 {
	var sum float64
	for _, v := range a.Monthly {
		sum += v
	}
	return sum / float64(len(a.Monthly))
}

type ContractSpecification struct {
	Exchange      string
	Months        string
	PointValueUsd float64
	Symbol        string
	Name          string
	Category      Category
	ContractSize  float64
	SizeUnit      string
}

var ContractSpecifications = map[string]ContractSpecification{
	"A6": {"CME", "HMUZ", 100000, "A6", "Australian Dollar", Categories.Financials, 100000, "AUD"},
	"BO": {"CBOT", "FHKNQUVZ", 600, "BO", "Soybean Oil (P)", Categories.GrainsAndOilseeds, 60000, "lb"},
	"C":  {"CBOT", "HKNUZ", 50, "C ", "Corn (P)", Categories.GrainsAndOilseeds, 5000, "bu"},
	"CB": {"ICE", "FGHJKMNQUVXZ", 1000, "CB", "Crude Oil Brent", Categories.Energies, 1000, "bbl"},
	"CC": {"ICEUS", "HKNUZ", 10, "CC", "Cocoa", Categories.Softs, 10, "ton"},
	"CL": {"NYMEX", "FGHJKMNQUVXZ", 1000, "CL", "Crude Oil", Categories.Energies, 1000, "bbl"},
	"CT": {"ICEUS", "HKNVZ", 500, "CT", "Cotton #2", Categories.Softs, 50000, "lb"},
	"D6": {"CME", "HMUZ", 100000, "D6", "Canadian Dollar", Categories.Financials, 100000, "CAD"},
	"DA": {"CME", "FGHJKMNQUVXZ", 2000, "DA", "Class III Milk (P)", Categories.Meats, 200000, "lb"},
	"DL": {"CME", "FGHJKMNQUVXZ", 2000, "DL", "Class III Milk", Categories.Meats, 200000, "lb"},
	"DX": {"ICEFI", "HMUZ", 1000, "DX", "US Dollar Index", Categories.Financials, 1000, "USD"},
	"E6": {"CME", "HMUZ", 125000, "E6", "Euro FX", Categories.Financials, 125000, "EUR"},
	"FC": {"CME", "FHJKQUVX", 500, "FC", "Feeder Cattle (P)", Categories.Meats, 50000, "lb"},
	"GC": {"COMEX", "GJMQVZ", 100, "GC", "Gold", Categories.Metals, 100, "ozt"},
	"GF": {"CME", "FHJKQUVX", 500, "GF", "Feeder Cattle", Categories.Meats, 50000, "lb"},
	"HE": {"CBOT", "GJKMNQVZ", 400, "HE", "Lean Hoghs", Categories.Meats, 40000, "lb"},
	"HG": {"COMEX", "FGHJKMNQUVXZ", 25000, "HG", "High Grade Cooper", Categories.Metals, 25000, "lb"},
	"HO": {"NYMEX", "FGHJKMNQUVXZ", 42000, "HO", "Heating Oil", Categories.Energies, 42000, "gal"},
	"KC": {"ICEUS", "HKNUZ", 375, "KC", "Coffee Arabica", Categories.Softs, 37500, "lb"},
	"KE": {"KCBT", "HKNUZ", 50, "KE", "Red Wheat", Categories.GrainsAndOilseeds, 5000, "bu"},
	"KW": {"KCBT", "HKNUZ", 50, "KW", "Kcbt Red Wheat (P) ", Categories.GrainsAndOilseeds, 5000, "bu"},
	"LB": {"CME", "FHKNUX", 110, "LB", "Timber", Categories.Softs, 110000, "bd ft"},
	"LC": {"CME", "GJMQVZ", 400, "LC", "Live Cattle (P)", Categories.Meats, 40000, "lb"},
	"LE": {"CME", "GJMQVZ", 400, "LE", "Live Cattle", Categories.Meats, 40000, "lb"},
	"LH": {"CME", "GJKMNQVZ", 400, "LH", "Lean Hogs", Categories.Meats, 40000, "lb"},
	"LS": {"CME", "FHKNUX", 110, "LS", "Lumber", Categories.Softs, 110000, "bd ft"},
	"MW": {"MGEX", "HKNUZ", 50, "MW", "Spring Wheat", Categories.GrainsAndOilseeds, 5000, "bu"},
	"NG": {"NYMEX", "FGHJKMNQUVXZ", 10000, "NG", "Natural Gas", Categories.Energies, 10000, "MMBtu"},
	"O":  {"CBOT", "HKNUZ", 50, "O ", "Oats (P)", Categories.GrainsAndOilseeds, 5000, "bu"},
	"OJ": {"ICEUS", "FHKNUX", 150, "OJ", "Orange Juice", Categories.Softs, 15000, "lb"},
	"PA": {"NYMEX", "HJKMUZ", 100, "PA", "Palladium", Categories.Metals, 100, "ozt"},
	"PB": {"CME", "GHKNQ", 400, "PB", "Pork Bellies (P)", Categories.Meats, 40000, "lb"},
	"PD": {"CME", "GHKNQ", 400, "PD", "Pork Bellies", Categories.Meats, 40000, "lb"},
	"PL": {"NYMEX", "FHJKNV", 50, "PL", "Platinum", Categories.Metals, 50, "ozt"},
	"RB": {"NYMEX", "FGHJKMNQUVXZ", 42000, "RB", "Gasoline RBOB", Categories.Energies, 42000, "gal"},
	"RM": {"LCE", "FHKNUX", 10, "RM", "Coffee Robusta", Categories.Softs, 10, "ton"},
	"RR": {"CBOT", "FHKNUX", 2000, "RR", "Rough Rice (P)", Categories.GrainsAndOilseeds, 2000, "cwt"},
	"RS": {"WCE", "FHKNX", 20, "RS", "Canola", Categories.GrainsAndOilseeds, 20, "ton"},
	"S":  {"CBOT", "FHKNQUX", 50, "S ", "Soybeans (P)", Categories.GrainsAndOilseeds, 5000, "bu"},
	"S6": {"CME", "HMUZ", 125000, "S6", "Swiss Franc", Categories.Financials, 125000, "CHF"},
	"SB": {"ICEUS", "HKNV", 1120, "SB", "Sugar#11", Categories.Softs, 112000, "lb"},
	"SD": {"ICEUS", "FHKNUX", 1120, "SD", "Sugar #16", Categories.Softs, 112000, "lb"},
	"SI": {"IOM", "FHHKMNUUZZ", 5000, "SI", "Silver", Categories.Metals, 5000, "ozt"},
	"SM": {"CBOT", "FHKNQUVZ", 100, "SM", "Soybean Meal (P)", Categories.GrainsAndOilseeds, 100, "ton"},
	"SP": {"CME", "HMUZ", 250, "SP", "S&P 500 Index", Categories.Indices, 250, "USD"},
	"VI": {"CFE", "FGHJKMNQUVXZ", 1000, "VI", "Cboe S&P VIX", Categories.Indices, 1000, "USD"},
	"W":  {"CBOT", "HKNUZ", 50, "W ", "Wheat (P)", Categories.GrainsAndOilseeds, 5000, "bu"},
	"ZC": {"CBOT", "HKNUZ", 50, "ZC", "Corn", Categories.GrainsAndOilseeds, 5000, "bu"},
	"ZK": {"CBOT", "FGHJKMNQUVXZ", 29000, "ZK", "Ethanol", Categories.Energies, 29000, "gal"},
	"ZL": {"CBOT", "FHKNQUVZ", 600, "ZL", "Soybean Oil", Categories.GrainsAndOilseeds, 60000, "lb"},
	"ZM": {"CBOT", "FHKNQUVZ", 100, "ZM", "Soybean Meal", Categories.GrainsAndOilseeds, 100, "ton"},
	"ZO": {"CBOT", "HKNUZ", 50, "ZO", "Oats", Categories.GrainsAndOilseeds, 5000, "bu"},
	"ZR": {"CBOT", "FHKNUX", 2000, "ZR", "Rough Rice", Categories.GrainsAndOilseeds, 2000, "cwt"},
	"ZS": {"CBOT", "FHKNQUX", 50, "ZS", "Soybeans", Categories.GrainsAndOilseeds, 5000, "bu"},
	"ZW": {"CBOT", "HKNUZ", 50, "ZW", "Wheat", Categories.GrainsAndOilseeds, 5000, "bu"},
}

type Model struct {
	ContractSpecification ContractSpecification
	WeeklyData            []Quote
}
